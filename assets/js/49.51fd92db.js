(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{464:function(a,e,s){"use strict";s.r(e);var t=s(35),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"running-the-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-the-server"}},[a._v("#")]),a._v(" Running the Server")]),a._v(" "),s("h3",{attrs:{id:"enable-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enable-server"}},[a._v("#")]),a._v(" Enable Server")]),a._v(" "),s("p",[a._v("To enable RPC server use the following flag (set to true by default).")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("metaosd start --json-rpc.enable\n")])])]),s("h3",{attrs:{id:"defining-namespaces"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defining-namespaces"}},[a._v("#")]),a._v(" Defining Namespaces")]),a._v(" "),s("p",[s("code",[a._v("Eth")]),a._v(","),s("code",[a._v("Net")]),a._v(" and "),s("code",[a._v("Web3")]),a._v(" namespaces are enabled by default. In order to enable other namespaces use flag "),s("code",[a._v("--json-rpc.api")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("metaosd start --json-rpc.api eth,txpool,personal,net,debug,web3,miner\n")])])]),s("h3",{attrs:{id:"set-a-gas-cap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-a-gas-cap"}},[a._v("#")]),a._v(" Set a Gas Cap")]),a._v(" "),s("p",[s("code",[a._v("eth_call")]),a._v(" and "),s("code",[a._v("eth_estimateGas")]),a._v(" define a global gas cap over rpc for DoS protection. You can override the default gas cap value of 25,000,000 by passing a custom value when starting the node:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# set gas cap to 85M")]),a._v("\nmetaosd start --json-rpc.gas-cap "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("85000000000")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# set gas cap to infinite (=0)")]),a._v("\nmetaosd start --json-rpc.gas-cap "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n")])])]),s("h3",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[a._v("#")]),a._v(" CORS")]),a._v(" "),s("p",[a._v("If accessing the RPC from a browser, CORS will need to be enabled with the appropriate domain set. Otherwise, JavaScript calls are limit by the same-origin policy and requests will fail.")]),a._v(" "),s("p",[a._v("The CORS setting can be updated from the "),s("code",[a._v("app.toml")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("###############################################################################")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("###                           API Configuration                             ###")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("###############################################################################")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("api"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# EnableUnsafeCORS defines if CORS should be enabled (unsafe - use it at your own risk).")]),a._v("\nenabled-unsafe-cors "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# default false")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);