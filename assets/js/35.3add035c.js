(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{450:function(t,s,e){"use strict";e.r(s);var a=e(35),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"guides"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#guides"}},[t._v("#")]),t._v(" Guides")]),t._v(" "),e("h2",{attrs:{id:"wallet-integration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wallet-integration"}},[t._v("#")]),t._v(" Wallet Integration")]),t._v(" "),e("h3",{attrs:{id:"implementation-checklist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation-checklist"}},[t._v("#")]),t._v(" Implementation Checklist")]),t._v(" "),e("p",[t._v("The integration implementation checklist for dApp developers consists of three categories:")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"#frontend"}},[t._v("Frontend features")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#transactions"}},[t._v("Transactions and wallet interactions")])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("Client-side provider")])])]),t._v(" "),e("h3",{attrs:{id:"frontend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#frontend"}},[t._v("#")]),t._v(" Frontend")]),t._v(" "),e("p",[t._v('Make sure to create a wallet-connection button for Metamask and/or MetaOs-Wallet on the frontend of the application.\nFor instance, consider the "Connect to a wallet" button on the interface of '),e("a",{attrs:{href:"https://app.metaos.im",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://app.metaos.im"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"transactions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactions"}},[t._v("#")]),t._v(" Transactions")]),t._v(" "),e("p",[t._v("Developers enabling transactions on their dApp have to determine wallet type of the user, create the transaction,\nrequest signatures from the corresponding wallet, and finally broadcast the transaction to the network.")]),t._v(" "),e("h4",{attrs:{id:"determining-wallet-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#determining-wallet-type"}},[t._v("#")]),t._v(" Determining Wallet Type")]),t._v(" "),e("p",[t._v("Developers should determine whether users are using Keplr or MetaMask.\nWhether MetaMask or MetaOs-Wallet is installed on the user device can be determined by checking the corresponding\n"),e("code",[t._v("window.ethereum")]),t._v(" or "),e("code",[t._v("window.keplr")]),t._v(" value.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("For MetaMask")]),t._v(": "),e("code",[t._v("await window.ethereum.enable(chainId)")]),t._v(";")]),t._v(" "),e("li",[e("strong",[t._v("For MetaOs-Wallet")]),t._v(": "),e("code",[t._v("await window.keplr.enable(chainId)")]),t._v(";")])]),t._v(" "),e("p",[t._v("If either "),e("code",[t._v("window.ethereum")]),t._v(" or "),e("code",[t._v("window.keplr")]),t._v(" returns undefined after document.load, then MetaMask (or, correspondingly, MetaOs-Wallet) is not installed.\nThere are several ways to wait for the load event to check the status: for instance, developers can register functions to window.onload, or they can track the document's ready state through the document event listener.")]),t._v(" "),e("p",[t._v("After the user's wallet type has been determined, developers can proceed with creating, signing, and sending transactions.")]),t._v(" "),e("h3",{attrs:{id:"metaosd-tendermint-rpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#metaosd-tendermint-rpc"}},[t._v("#")]),t._v(" metaosd & Tendermint RPC")]),t._v(" "),e("p",[t._v("Upon installation and configuration of the MetaOS Daemon, developers can query account balances using "),e("code",[t._v("metaosd")]),t._v(" with the following CLI command:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("metaosd query bank balances mtos1wk4manyfhfx3sgzgp8k0fjf3jmra796k57xrhh\nbalances:\n- amount: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"99999999000000000000000000"')]),t._v("\n  denom: umtos\npagination:\n  next_key: null\n  total: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v("\n")])])]),e("h3",{attrs:{id:"json-rpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-rpc"}},[t._v("#")]),t._v(" JSON-RPC")]),t._v(" "),e("p",[t._v("Developers can query account balances of amtos using the eth_getBalance\nJSON-RPC method in conjunction with curl:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Request")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST --data "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"jsonrpc":"2.0","method":"eth_getBalance","params":[`$ETHADDRESS`, `$BLOCK`],"id":1}\'')]),t._v(" -H "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Result")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsonrpc"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0"')]),t._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(":1,"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"result"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0x36354d5575577c8000"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("where:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$ETHADDRESS")]),t._v(" is the Etherum hex-address the balance is to be queried from. Note that MetaOs addresses (those beginning with mtos1...)")]),t._v(" "),e("li",[t._v("can be converte.d to Ethereum addresses.")]),t._v(" "),e("li",[e("code",[t._v("$BLOCK")]),t._v(' is the block number or block hash (eg. "0x0"). The reasoning for this parameter is due to '),e("a",{attrs:{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1898.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("EIP-1898"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[t._v("(optional if running local node) "),e("code",[t._v("$NODE")]),t._v(" is the JSON-RPC node information is requested from.")])]),t._v(" "),e("p",[t._v("Developers can also query account balances of x/erc20-module registered coins using the eth_call JSON-RPC method\nin conjunction with curl:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Request")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST --data "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"jsonrpc":"2.0","method":"eth_call","params":[{"from":`SENDERCONTRACTADDRESS`, "to":`ERCCONTRACTADDRESS`, "data":`$DATA`}, `$BLOCK`],"id":1}\'')]),t._v("  -H "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Result")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsonrpc"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2.0"')]),t._v(","),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(":1,"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"result"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0x"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("where:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$SENDERCONTRACTADDRESS")]),t._v(" is the Ethereum hex-address this smart contract call is sent from.")]),t._v(" "),e("li",[e("code",[t._v("$ERCCONTRACTADDRESS")]),t._v(" is the Ethereum hex-address of the ERC-20 contract corresponding to the coin denomination being queried.")]),t._v(" "),e("li",[e("code",[t._v("$DATA")]),t._v(" is the hash of the "),e("a",{attrs:{href:"https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#ERC20",target:"_blank",rel:"noopener noreferrer"}},[t._v("balanceof"),e("OutboundLink")],1),t._v(" method signature and encoded parameters.\nbalanceOf is a required method in every ERC-20 contract, and the encoded parameter is the address which is having its balance queried.\nFor additional information, see the Ethereum Contract "),e("a",{attrs:{href:"https://docs.soliditylang.org/en/v0.8.13/abi-spec.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ABI"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("$BLOCK")]),t._v(" is the block number or block hash (eg. "),e("code",[t._v('"0x0"')]),t._v("). The reasoning for this parameter is due to "),e("a",{attrs:{href:"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1898.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("EIP-1898"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[t._v("(optional if running local node) "),e("code",[t._v("$NODE")]),t._v(" is the JSON-RPC node information is requested from.")])]),t._v(" "),e("h3",{attrs:{id:"grpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grpc"}},[t._v("#")]),t._v(" gRPC")]),t._v(" "),e("p",[t._v("Developers can use "),e("a",{attrs:{href:"https://github.com/fullstorydev/grpcurl",target:"_blank",rel:"noopener noreferrer"}},[t._v("grpcurl"),e("OutboundLink")],1),t._v(" with the AllBalances endpoint to query account balance by address for all denominations:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Request")]),t._v("\ngrpcurl "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$OUTPUT")]),t._v(" -d "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{\"address\":`$METAOSADDRESS`}'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$NODE")]),t._v(" cosmos.bank.v1beta1.Query/AllBalances\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Result")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"balances"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"denom"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stake"')]),t._v(",\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000000000"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pagination"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"total"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("where:")]),t._v(" "),e("ul",[e("li",[t._v('$METAOSADDRESS is the MetaOs address with balances of interest (eg. "mtos1...").')]),t._v(" "),e("li",[t._v("$NODE is the Cosmos gRPC node information is requested from.")]),t._v(" "),e("li",[t._v("(optional) $OUTPUT is the output format (eg. plaintext).")])]),t._v(" "),e("p",[t._v("State can also be queried using gRPC within a Go program. The idea is to create a gRPC connection, then use the\n"),e("a",{attrs:{href:"https://developers.google.com/protocol-buffers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protobuf"),e("OutboundLink")],1),t._v("-generated client code to query the gRPC server.")]),t._v(" "),e("div",{staticClass:"language-go extra-class"},[e("pre",{pre:!0,attrs:{class:"language-go"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"context"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google.golang.org/grpc"')]),t._v("\n\n    sdk "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/cosmos/cosmos-sdk/types"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github.com/cosmos/cosmos-sdk/types/tx"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("queryState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    myAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMtosAddressFromBech32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mtos1..."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" err\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a connection to the gRPC server.")]),t._v("\n    grpcConn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" grpc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dial")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:9090"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// your gRPC server address.")]),t._v("\n        grpc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithInsecure")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the SDK doesn't support any transport security mechanism.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" grpcConn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This creates a gRPC client to query the x/bank service.")]),t._v("\n    bankClient "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" banktypes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewQueryClient")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("grpcConn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    bankRes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" bankClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AllBalances")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Background")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("banktypes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("QueryAllBalancesRequest"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Address"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" err\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    fmt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bankRes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetBalances")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints the account balances.")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMtosAddressFromBech32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("address "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);