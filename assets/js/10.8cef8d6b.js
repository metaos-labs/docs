(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{425:function(e,t,a){"use strict";a.r(t);var n=a(35),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"disk-usage-optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-usage-optimization"}},[e._v("#")]),e._v(" Disk Usage Optimization")]),e._v(" "),a("p",[e._v("Blockchain database tends to grow over time, depending e.g. on block speed and transaction amount.\nFor MetaOS, we are talking about close to 100GB of disk usage in first two weeks.")]),e._v(" "),a("p",[e._v("There are few configurations that can be done to reduce the required disk usage quite significantly.\nSome of these changes take full effect only when you do the configuration and start syncing from start with them in use.")]),e._v(" "),a("h3",{attrs:{id:"indexing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexing"}},[e._v("#")]),e._v(" Indexing")]),e._v(" "),a("p",[e._v("If you do not need to query transactions from the specific node, you can disable indexing. On "),a("code",[e._v("config.toml")]),e._v(" set")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[e._v('indexer = "null"\n')])])]),a("p",[e._v("If you do this on already synced node, the collected index is not purged automatically, you need to delete it manually.\nThe index is located under the database directory with name "),a("code",[e._v("data/tx_index.db/")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"state-sync-snapshots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sync-snapshots"}},[e._v("#")]),e._v(" State-sync snapshots")]),e._v(" "),a("p",[e._v("I believe this was disabled by default on MetaOS, but listing it in any case here. On "),a("code",[e._v("app.toml")]),e._v(" set")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[e._v("snapshot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("interval = 0\n")])])]),a("p",[e._v("Note that if state-sync was enabled on the network and working properly, it would allow one to sync a new node in few minutes.\nBut this node would not have the history.")]),e._v(" "),a("h3",{attrs:{id:"configure-pruning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-pruning"}},[e._v("#")]),e._v(" Configure pruning")]),e._v(" "),a("p",[e._v("By default every 500th state, and the last 100 states are kept.\nThis consumes a lot of disk space on long run, and can be optimized with following custom configuration:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[e._v('pruning = "custom"\npruning'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("keep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('recent = "100"\npruning'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("keep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('every = "0"\npruning'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('interval = "10"\n')])])]),a("p",[e._v("Configuring "),a("code",[e._v('pruning-keep-recent = "0"')]),e._v(" might sound tempting, but this will risk database corruption if the "),a("code",[e._v("metaosd")]),e._v(" is killed for any reason.\nThus, it is recommended to keep the few latest states.")]),e._v(" "),a("h3",{attrs:{id:"logging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[e._v("#")]),e._v(" Logging")]),e._v(" "),a("p",[e._v("By default the logging level is set to "),a("code",[e._v("info")]),e._v(", and this produces a lot of logs. This log level might be good when starting up to see that the node starts syncing properly.\nHowever, after you see the syncing is going smoothly, you can lower the log level to "),a("code",[e._v("warn")]),e._v(" (or "),a("code",[e._v("error")]),e._v("). On "),a("code",[e._v("config.toml")]),e._v(" set the following")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[e._v('log_level = "warn"\n')])])]),a("p",[e._v("Also ensure your log rotation is configured properly.")])])}),[],!1,null,null,null);t.default=s.exports}}]);