(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{444:function(e,t,s){"use strict";s.r(t);var a=s(35),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"implement-security-practices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implement-security-practices"}},[e._v("#")]),e._v(" Implement security practices")]),e._v(" "),s("p",[e._v("Each validator candidate is encouraged to run its operations independently. Diverse individual setups increase the resilience of the network.")]),e._v(" "),s("h2",{attrs:{id:"manage-digital-keys-with-hsm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manage-digital-keys-with-hsm"}},[e._v("#")]),e._v(" Manage digital keys with HSM")]),e._v(" "),s("p",[e._v("Key management is mission critical for validators. If an attacker gains access to a validator's private key, it puts the validator's entire delegated stake at risk. Hardware security modules are an important strategy for mitigating this risk.")]),e._v(" "),s("p",[e._v("Consider implementing this "),s("a",{attrs:{href:"https://github.com/iqlusioninc/tmkms",target:"_blank",rel:"noopener noreferrer"}},[e._v("key-management method"),s("OutboundLink")],1),e._v(" by Iqulusion. Read "),s("RouterLink",{attrs:{to:"/en/for_validator/run_validator/remote-signer.html"}},[e._v("this")]),e._v(" to learn how to use it.")],1),e._v(" "),s("h2",{attrs:{id:"defend-against-ddos-attacks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defend-against-ddos-attacks"}},[e._v("#")]),e._v(" Defend against DDoS attacks")]),e._v(" "),s("p",[e._v("Validators are responsible for ensuring that the network can defend against denial of service attacks.")]),e._v(" "),s("p",[e._v("Validators can mitigate these attacks by carefully structuring their network topology in a sentry node architecture.")]),e._v(" "),s("p",[e._v("Validator nodes should only connect to full nodes they trust. They can be run by the same validator or other validators they know. A validator node will typically run in a data center. Most data centers provide direct links to major cloud providers. A validator can use these links to connect to sentry nodes in the cloud. This shifts the burden of denial-of-service from the validator's node directly to its sentry nodes. This may require new sentry nodes to be spun up or activated to mitigate attacks on existing ones.")]),e._v(" "),s("p",[e._v("Sentry nodes can be quickly spun up or used to change IP addresses. Because links to the sentry nodes are in private IP space, an internet based attack can't disturb them directly. This will ensure a validator's block proposals and votes always make it to the rest of the network.")]),e._v(" "),s("p",[e._v("Learn more about "),s("RouterLink",{attrs:{to:"/en/for_validator/run_validator/sentry-node-architecture.html"}},[e._v("sentry-node architecture")]),e._v(".")],1),e._v(" "),s("ol",[s("li",[s("p",[e._v("For validators nodes, edit the "),s("code",[e._v("config.toml")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comma separated list of nodes to keep persistent connections to")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do not add private peers to this list if you don't want them advertised")]),e._v("\npersistent_peers "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"comma separated list of sentry node addresses"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List of node IDs, to which a connection will be (re)established ignoring any existing limits")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comma separated list of nodeID's. These nodes will be connected to no matter the limits of inbound and outbound peers. This is useful for when sentry nodes have full address books.")]),e._v("\nunconditional_peer_ids "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"optionally other sentry node IDs"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set false for private or local networks")]),e._v("\naddr_book_strict "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set true to enable the peer-exchange reactor")]),e._v("\npex "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[e._v("For sentry nodes, edit the "),s("code",[e._v("config.toml")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comma separated list of nodes to keep persistent connections to")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do not add private peers to this list if you don't want them advertised")]),e._v("\npersistent_peers "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"validator node address, optionally other sentry nodes"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List of node IDs, to which a connection will be (re)established ignoring any existing limits")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comma separated list of nodeID's. These nodes will be connected to no matter the limits of inbound and outbound peers. This is useful for when sentry nodes have full address books.")]),e._v("\nunconditional_peer_ids "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"validator node ID,optionally other sentry node IDs"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comma separated list of peer IDs to keep private (will not be gossiped to other peers)")]),e._v("\nprivate_peer_ids "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"validator node ID"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set false for private or local networks")]),e._v("\naddr_book_strict "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set true to enable the peer-exchange reactor")]),e._v("\npex "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])])])]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Tip")]),e._v(": A node address has the following format: "),s("code",[e._v("nodeid@ip:port")]),e._v(", you can get the nodeid by running "),s("code",[e._v("metaosd tendermint show-node-id")]),e._v(", the default port is 26656.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);