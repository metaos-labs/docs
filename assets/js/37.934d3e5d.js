(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{452:function(e,t,a){"use strict";a.r(t);var o=a(35),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"json-rpc-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-rpc-server"}},[e._v("#")]),e._v(" JSON-RPC Server")]),e._v(" "),a("p",[e._v("The JSON-PRC Server provides an API that allows you to connect to the MetaOS blockchain and interact with the EVM. This gives you direct access to reading Ethereum-formatted transactions or sending them to the network which otherwise wouldn't be possible on a Cosmos chain, such as MetaOS.")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.jsonrpc.org/specification",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON-RPC"),a("OutboundLink")],1),e._v(" is a stateless, light-weight remote procedure call (RPC) protocol. It defines several data structures and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets, over HTTP, or in many various message passing environments. It uses JSON ("),a("a",{attrs:{href:"https://www.ietf.org/rfc/rfc4627.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 4627"),a("OutboundLink")],1),e._v(") as data format.")]),e._v(" "),a("p",[e._v("JSON-RPC is provided on multiple transports. MetaOS supports JSON-RPC over HTTP and WebSocket. Transports must be enabled through command-line flags or through the "),a("code",[e._v("app.toml")]),e._v(" configuration file.")]),e._v(" "),a("h3",{attrs:{id:"web3-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web3-support"}},[e._v("#")]),e._v(" Web3 Support")]),e._v(" "),a("p",[e._v("MetaOS supports all standard web3 JSON-RPC APIs. You can find documentation for these APIs on the "),a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html"}},[e._v("JSON-RPC Methods")]),e._v(" page.")],1),e._v(" "),a("p",[e._v("Ethereum JSON-RPC APIs use a name-space system. RPC methods are grouped into several categories depending on their purpose. All method names are composed of the namespace, an underscore, and the actual method name within the namespace. For example, the eth_call method resides in the eth namespace.")]),e._v(" "),a("p",[e._v("Access to RPC methods can be enabled on a per-namespace basis. Find documentation for individual namespaces in the "),a("RouterLink",{attrs:{to:"/en/for_web3_dev/namespace.html"}},[e._v("Namespaces")]),e._v(" page.")],1),e._v(" "),a("h3",{attrs:{id:"hex-value-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hex-value-encoding"}},[e._v("#")]),e._v(" HEX value encoding")]),e._v(" "),a("p",[e._v("At present there are two key datatypes that are passed over JSON:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("quantities")]),e._v(" and")]),e._v(" "),a("li",[a("strong",[e._v("unformatted byte arrays")]),e._v(".")])]),e._v(" "),a("p",[e._v("Both are passed with a hex encoding, however with different requirements to formatting.")]),e._v(" "),a("p",[e._v("When encoding quantities (integers, numbers), encode as hex, prefix with "),a("code",[e._v('"0x"')]),e._v(", the most compact representation (slight exception: zero should be represented as "),a("code",[e._v('"0x0"')]),e._v("). Examples:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("0x41")]),e._v(" (65 in decimal)")]),e._v(" "),a("li",[a("code",[e._v("0x400")]),e._v(" (1024 in decimal)")]),e._v(" "),a("li",[e._v("WRONG: "),a("code",[e._v("0x")]),e._v(" (should always have at least one digit - zero is "),a("code",[e._v('"0x0"')]),e._v(")")]),e._v(" "),a("li",[e._v("WRONG: "),a("code",[e._v("0x0400")]),e._v(" (no leading zeroes allowed)")]),e._v(" "),a("li",[e._v("WRONG: "),a("code",[e._v("ff")]),e._v(" (must be prefixed "),a("code",[e._v("0x")]),e._v(")")])]),e._v(" "),a("p",[e._v('When encoding unformatted data (byte arrays, account addresses, hashes, bytecode arrays), encode as hex, prefix with "0x", two hex digits per byte. Examples:')]),e._v(" "),a("ul",[a("li",[a("code",[e._v("0x41")]),e._v(" (size 1, "),a("code",[e._v('"A"')]),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("0x004200")]),e._v(" (size 3, "),a("code",[e._v('"\\0B\\0"')]),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("0x")]),e._v(" (size 0, "),a("code",[e._v('""')]),e._v(")")]),e._v(" "),a("li",[e._v("WRONG: "),a("code",[e._v("0xf0f0f")]),e._v(" (must be even number of digits)")]),e._v(" "),a("li",[e._v("WRONG: "),a("code",[e._v("004200")]),e._v(" (must be prefixed "),a("code",[e._v("0x")]),e._v(")")])]),e._v(" "),a("h3",{attrs:{id:"default-block-parameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-block-parameter"}},[e._v("#")]),e._v(" Default block parameter")]),e._v(" "),a("p",[e._v("the following methods have an extra default block parameter:")]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html#eth-getbalance"}},[e._v("eth_getBalance")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html#eth-getcode"}},[e._v("eth_getCode")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html#eth-gettransactioncount"}},[e._v("eth_getTransactionCount")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html#eth-getstorageat"}},[e._v("eth_getStorageAt")])],1),e._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/for_web3_dev/jsonrpc_method.html#eth-call"}},[e._v("eth_call")])],1)]),e._v(" "),a("p",[e._v("When requests are made that act on the state of MetaOS, the last default block parameter determines the height of the block.\nThe following options are possible for the "),a("code",[e._v("defaultBlock")]),e._v(" parameter:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("HEX String")]),e._v(" - an integer block number")]),e._v(" "),a("li",[a("code",[e._v('String "earliest"')]),e._v(" for the earliest/genesis block")]),e._v(" "),a("li",[a("code",[e._v('String "latest"')]),e._v(" - for the latest mined block")]),e._v(" "),a("li",[a("code",[e._v('String "pending"')]),e._v(" - for the pending state/transactions")])]),e._v(" "),a("h3",{attrs:{id:"curl-examples-explained"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#curl-examples-explained"}},[e._v("#")]),e._v(" Curl Examples Explained")]),e._v(" "),a("p",[e._v("The curl options below might return a response where the node complains about the content type, this is because the "),a("code",[e._v("--data")]),e._v(" option sets the content type to "),a("code",[e._v("application/x-www-form-urlencoded")]),e._v(". If your node does complain, manually set the header by placing -H "),a("code",[e._v('"Content-Type: application/json"')]),e._v(" at the start of the call.")]),e._v(" "),a("p",[e._v("The examples also do not include the URL/IP & port combination which must be the last argument given to curl e.x. "),a("code",[e._v("127.0.0.1:8545")])])])}),[],!1,null,null,null);t.default=r.exports}}]);