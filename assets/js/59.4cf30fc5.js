(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{474:function(t,e,s){"use strict";s.r(e);var a=s(35),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"multisig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multisig"}},[t._v("#")]),t._v(" Multisig")]),t._v(" "),s("p",[t._v("A "),s("strong",[t._v("multisig account")]),t._v(" is an MetaOS account with a special key that can require more than one signature to sign transactions. This can be useful for increasing the security of the account or for requiring the consent of multiple parties to make transactions. Multisig accounts can be created by specifying:")]),t._v(" "),s("ul",[s("li",[t._v("threshold number of signatures required")]),t._v(" "),s("li",[t._v("the public keys involved in signing")])]),t._v(" "),s("p",[t._v("To sign with a multisig account, the transaction must be signed individually by the different keys specified for the account. Then, the signatures will be combined into a multisignature which can be used to sign the transaction. If fewer than the threshold number of signatures needed are present, the resultant multisignature is considered invalid.")]),t._v(" "),s("h3",{attrs:{id:"generate-a-multisig-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate-a-multisig-key"}},[t._v("#")]),t._v(" Generate a Multisig key")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("metaosd keys "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --multisig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name1,name2,name3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --multisig-threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("K new_key_name\n")])])]),s("p",[s("code",[t._v("K")]),t._v(" is the minimum number of private keys that must have signed the transactions that carry the public key's address as signer.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("--multisig")]),t._v(" flag must contain the name of public keys that will be combined into a public key that will be generated and stored as "),s("code",[t._v("new_key_name")]),t._v(" in the local database. All names supplied through "),s("code",[t._v("--multisig")]),t._v(" must already exist in the local database.")]),t._v(" "),s("p",[t._v("Unless the flag "),s("code",[t._v("--nosort")]),t._v(" is set, the order in which the keys are supplied on the command line does not matter, i.e. the following commands generate two identical keys:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("metaosd keys "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --multisig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p1,p2,p3 --multisig-threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" multisig_address\nmetaosd keys "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --multisig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("p2,p3,p1 --multisig-threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" multisig_address\n")])])]),s("p",[t._v("Multisig addresses can also be generated on-the-fly and printed through the which command:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("metaosd keys show --multisig-threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("K name1 name2 name3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"signing-a-transaction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signing-a-transaction"}},[t._v("#")]),t._v(" Signing a transaction")]),t._v(" "),s("h4",{attrs:{id:"step-1-create-the-multisig-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-1-create-the-multisig-key"}},[t._v("#")]),t._v(" Step 1: Create the multisig key")]),t._v(" "),s("p",[t._v("Let's assume that you have "),s("code",[t._v("test1")]),t._v(" and "),s("code",[t._v("test2")]),t._v(" want to make a multisig account with "),s("code",[t._v("test3")]),t._v(".")]),t._v(" "),s("p",[t._v("First import the public keys of "),s("code",[t._v("test3")]),t._v(" into your keyring.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("metaosd keys "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    test3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --pubkey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"Ak0uhJFaqWzxhYCQxoBi6zJaJUtlDJ9+RZeXKg76HouG"}\'')]),t._v("\n")])])]),s("p",[t._v("Generate the multisig key with 2/3 threshold.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("metaosd keys "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    multi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --multisig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("alice,bob,test3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --multisig-threshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("p",[t._v("You can see its address and details:")])])}),[],!1,null,null,null);e.default=n.exports}}]);