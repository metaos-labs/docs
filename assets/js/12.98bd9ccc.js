(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{427:function(e,t,a){"use strict";a.r(t);var n=a(35),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"metaosd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metaosd"}},[e._v("#")]),e._v(" metaosd")]),e._v(" "),a("h3",{attrs:{id:"build-and-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-and-configuration"}},[e._v("#")]),e._v(" Build and Configuration")]),e._v(" "),a("h4",{attrs:{id:"using-metaosd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-metaosd"}},[e._v("#")]),e._v(" Using "),a("code",[e._v("metaosd")])]),e._v(" "),a("p",[e._v("After you have obtained the latest metaosd binary, run:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("metaosd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[e._v("Check the version you are running using")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("metaosd version\n")])])]),a("p",[e._v("There is also a -h, --help command available")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("metaosd -h\n")])])]),a("h3",{attrs:{id:"config-and-data-directory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config-and-data-directory"}},[e._v("#")]),e._v(" Config and data directory")]),e._v(" "),a("p",[e._v("By default, your config and data are stored in the folder located at the ~/.metaos directory.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("                                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~/.metaos")]),e._v("\n  ├── data/                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Contains the databases used by the node.")]),e._v("\n  └── config/\n      ├── app.toml                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Application-related configuration file.")]),e._v("\n      ├── config.toml                "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tendermint-related configuration file.")]),e._v("\n      ├── genesis.json               "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The genesis file.")]),e._v("\n      ├── node_key.json              "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Private key to use for node authentication in the p2p protocol.")]),e._v("\n      └── priv_validator_key.json    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Private key to use as a validator in the consensus protocol.")]),e._v("\n")])])]),a("p",[e._v("To specify the "),a("code",[e._v("metaosd")]),e._v(" config and data storage directory; you can update it using the global flag "),a("code",[e._v("--home <directory>")])]),e._v(" "),a("h3",{attrs:{id:"configuring-the-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-the-node"}},[e._v("#")]),e._v(" Configuring the Node")]),e._v(" "),a("p",[e._v("The Cosmos SDK automatically generates two configuration files inside "),a("code",[e._v("~/.metaos/config")]),e._v(":")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("config.toml")]),e._v(": used to configure the Tendermint, learn more on "),a("a",{attrs:{href:"https://docs.tendermint.com/master/nodes/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint's documentation"),a("OutboundLink")],1),e._v(",")]),e._v(" "),a("li",[a("code",[e._v("app.toml")]),e._v(": generated by the Cosmos SDK, and used to configure your app, such as state pruning strategies, telemetry, gRPC and REST servers configuration, state sync, JSON-RPC, etc.")])]),e._v(" "),a("p",[e._v("Both files are heavily commented, please refer to them directly to tweak your node.")]),e._v(" "),a("p",[e._v("One example config to tweak is the "),a("code",[e._v("minimum-gas-prices")]),e._v(" field inside "),a("code",[e._v("app.toml")]),e._v(", which defines the minimum amount the validator node is willing to accept for processing a transaction. It is an anti spam mechanism and it will reject incoming transactions with less than the minimum gas prices.")]),e._v(" "),a("p",[e._v("If it's empty, make sure to edit the field with some value, for example 10token, or else the node will halt on startup.")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The minimum gas prices a validator is willing to accept for processing a")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# transaction. A transaction's fees must meet the minimum of any denomination")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# specified in this config (e.g. 0.25token1;0.0001token2).")]),e._v("\n minimum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("gas"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v('prices = "0amtos"\n')])])]),a("h3",{attrs:{id:"pruning-of-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pruning-of-state"}},[e._v("#")]),e._v(" Pruning of State")]),e._v(" "),a("p",[e._v("There are four strategies for pruning state. These strategies apply only to state and do not apply to block storage.\nTo set pruning, adjust the "),a("code",[e._v("pruning")]),e._v(" parameter in the "),a("code",[e._v("~/.metaos/config/app.toml")]),e._v(" file. The following pruning state settings are available:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("everything")]),e._v(": Prune all saved states other than the current state.")]),e._v(" "),a("li",[a("code",[e._v("nothing")]),e._v(": Save all states and delete nothing.")]),e._v(" "),a("li",[a("code",[e._v("default")]),e._v(": Save the last 100 states and the state of every 10,000th block.")]),e._v(" "),a("li",[a("code",[e._v("custom")]),e._v(": Specify pruning settings with the "),a("code",[e._v("pruning-keep-recent")]),e._v(", "),a("code",[e._v("pruning-keep-every")]),e._v(", and "),a("code",[e._v("pruning-interval")]),e._v(" parameters.")])]),e._v(" "),a("p",[e._v("By default, every node is in "),a("code",[e._v("default")]),e._v(" mode which is the recommended setting for most environments.\nIf you would like to change your nodes pruning strategy then you must do so when the node is initialized.\nPassing a flag when starting "),a("code",[e._v("metaos")]),e._v(" will always override settings in the "),a("code",[e._v("app.toml")]),e._v(" file,\nif you would like to change your node to the "),a("code",[e._v("everything")]),e._v(" mode then you can pass the "),a("code",[e._v("--pruning-everything")]),e._v(" flag when you call metaosd start.")])])}),[],!1,null,null,null);t.default=s.exports}}]);